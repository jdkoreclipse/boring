#!/system/bin/sh
# CMPLX TH3ORY Script Set

LOG_FILE=/data/cmplxth3ory.log

if [ -e $LOG_FILE ]; then
	rm $LOG_FILE;
fi;

# gain rw access
sysrw

# enable sysctl tweaks
#
sysctl -p /system/etc/sysctl.conf

# Start crond
#
sync
mount -o remount,rw rootfs /
echo "root:x:0:0::data/cron:/system/xbin/bash" > /system/etc/passwd
ln -s /system/xbin /xbin
sync
mount -o remount,ro rootfs /
timezone=`date +%z`
case "$timezone" in '-0800')
TZ=PST8PDT ;;
'-0700')
TZ=MST7MDT ;;
'-0600')
TZ=CST6CDT ;;
'-0500')
TZ=EST5EDT ;;
*)
TZ=EST5EDT ;;
esac
export TZ
crond -c /data/cron

# Kill Swap
#
echo "0" > /proc/sys/vm/swappiness

#HyperTh3ory
#
busybox rm -f /cache/*.apk
busybox rm -f /cache/*.tmp
busybox rm -f /data/dalvik-cache/*.apk
busybox rm -f /data/dalvik-cache/*.tmp
sysctl -w vm.overcommit_memory=1
sysctl -w vm.page-cluster=3
sysctl -w vm.drop_caches=3

# Optimize Vm
#
if [ -e /proc/sys/vm/vfs_cache_pressure ]; then
	echo "10" > /proc/sys/vm/vfs_cache_pressure
fi

if [ -e /proc/sys/vm/dirty_expire_centisecs ]; then
	echo "500" > /proc/sys/vm/dirty_expire_centisecs
fi

if [ -e /proc/sys/vm/dirty_writeback_centisecs ]; then
	echo "1000" > /proc/sys/vm/dirty_writeback_centisecs
fi

if [ -e /proc/sys/vm/dirty_ratio ]; then
	echo "90" > /proc/sys/vm/dirty_ratio
fi

if [ -e /proc/sys/vm/dirty_background_ratio ]; then
	echo "45" > /proc/sys/vm/dirty_background_ratio
fi

if [ -f "\$i" ]; then
	sync;
	echo "cfq" > \$i;
fi

#kernel tweaks
sysctl -w kernel.sched_features=15834233
sysctl -w kernel.panic=0
sysctl -w kernel.panic_on_oops=1
sysctl -w kernel.msgmni=2048
sysctl -w kernel.msgmax=64000
sysctl -w kernel.shmmax=268435500
sysctl -w kernel.sem=500,512000,64,2048
sysctl -w kernel.hung_task_timeout_secs=0
sysctl -w kernel.sched_latency_ns=5000000; #600000
sysctl -w kernel.sched_min_granularity_ns=1000000; #400000
sysctl -w kernel.sched_wakeup_granularity_ns=1000000
sysctl -w kernel.sched_compat_yield=1
sysctl -w kernel.sched_shares_ratelimit=256000
sysctl -w kernel.sched_child_runs_first=0
sysctl -w kernel.threads-max=525810
sysctl -w kernel.multi_threading=2

# I/O
#
echo "0 0 0 1 1 1 2 2" > /sys/devices/system/cpu/cpu0/cpufreq/busfreq_static
echo "enabled" > /sys/devices/system/cpu/cpu0/cpufreq/busfreq_static
echo "sio" >/sys/block/sda/queue/scheduler



# File System Mounts
#
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /dev
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /proc
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /sys
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nodev,data=writeback,barrier=0 -t auto /system
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /data
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /data/data
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /cache
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /acct
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /dev/pts
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /dev/cpuctl
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /mnt/asec
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /mnt/obb
busybox mount -o remount,noatime,nodiratime,discard,noauto_da_alloc,nosuid,nodev,data=writeback,barrier=0 -t auto /mnt/sdcard

#Defrags database files

VAC_LOG_FILE=/data/S50-vacuum-databases.log

# do nothing if less than 5 days
find $VAC_LOG_FILE -type f -mtime +5 -delete

if ! test -f $VAC_LOG_FILE; then

	/bin/mount -o remount,rw /

	if [ -e $VAC_LOG_FILE ]; then
		rm $VAC_LOG_FILE;
	fi;
    	
	echo "Starting Sqlite Vacuum $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $VAC_LOG_FILE;

	for i in \
	`find /data -iname "*.db"`
	do \
		sqlite3 $i 'VACUUM;'; 
		echo Vacuum $i  | tee -a $VAC_LOG_FILE;
	done;

	for i in \
	`find /dbdata -iname "*.db"`
	do \
		sqlite3 $i 'VACUUM;'; 
		echo Vacuum $i  | tee -a $VAC_LOG_FILE;
	done;

	for i in \
	`find /sdcard -iname "*.db"`
	do \
		sqlite3 $i 'VACUUM;'; 
		echo Vacuum $i  | tee -a $VAC_LOG_FILE;
	done

	echo "Sqlite Vacuum finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $VAC_LOG_FILE;

	/bin/mount -o remount,ro /

fi

# CMPLX zipalign.


ZIP_LOG_FILE=/data/log/zipalign.log;
ZIPALIGNED_APK=/data/local/zipalignedapk;

if [ -e $ZIP_LOG_FILE ]; then
	rm $ZIP_LOG_FILE;
fi;

if [ ! -f $ZIPALIGNED_APK ]; then
	touch $ZIPALIGNED_APK;
fi;

echo "Automatic ZipAlign started at $( date +"%m-%d-%Y %H:%M:%S" ) " | tee -a $ZiP_LOG_FILE;

for DIR in /system/app /data/app; do
	cd $DIR;
	for APK in *.apk; do
		if [ $APK -ot $ZIPALIGNED_APK ] && [ $(grep "$DIR/$APK" $ZIPALIGNED_APK|wc -l) -gt 0 ]; then
			echo "Already checked: $DIR/$APK" | tee -a $ZIP_LOG_FILE;
			if [ -e /data/$APK ]; then
				rm /data/$APK;
				echo "Temporary APK removed: /data/$APK" | tee -a $ZIP_LOG_FILE;
			fi;
		else
			ZIPCHECK=`/system/xbin/zipalign -c -v 4 $APK | grep FAILED | wc -l`;
			if [ $ZIPCHECK == "1" ]; then
				echo "Now aligning: $DIR/$APK" | tee -a $ZIP_LOG_FILE;
				/system/xbin/zipalign -v -f 4 $APK /data/$APK;
				sync
				busybox mount -o rw,remount /system;
				cp -f -p /data/$APK $APK;
				rm /data/$APK;
				if [ -e /data/$APK ]; then
					sleep 2;
					rm /data/$APK;
					if [ -e /data/$APK ]; then
						echo "Failed to remove APK. Run the tweak again : /data/$APK" | tee -a $ZIP_LOG_FILE;
					else
						echo "Temporary APK removed: /data/$APK" | tee -a $ZIP_LOG_FILE;
					fi;
				fi;
				grep "$DIR/$APK" $ZIPALIGNED_APK > /dev/null || echo $DIR/$APK >> $ZIPALIGNED_APK;
			else
				echo "Already aligned: $DIR/$APK" | tee -a $ZIP_LOG_FILE;
				if [ -e /data/$APK ]; then
					rm /data/$APK;
					echo "Temporary APK removed: /data/$APK" | tee -a $ZIP_LOG_FILE;
				fi;
				grep "$DIR/$APK" $ZIPALIGNED_APK > /dev/null || echo $DIR/$APK >> $ZIPALIGNED_APK;
			fi;
		fi;
	done;
done;
sync
busybox mount -o ro,remount /system;
touch $ZIPALIGNED_APK;
echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $ZIP_LOG_FILE;

#set renice credit Prime Directive
#tweaked by Sonicxml
# Fixed by jdk
#
renice -15 `pidof com.android.launcher`
renice -12 `pidof com.google.android.browser`
renice -10 `pidof com.android.phone`
renice -10 `pidof com.android.systemui`
renice -8 `pidof com.android.settings`
renice -6 `pidof com.android.camera`
renice -6 `pidof com.google.android.apps.maps`

busybox rm -f /data/system/userbehavior.db
busybox chmod 400 /data/system/usagestats/
busybox chmod 400 /data/system/appusagestats/
